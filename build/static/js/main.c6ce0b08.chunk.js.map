{"version":3,"sources":["components/useClasses/section/Section.js","components/useClasses/notifications/Notification.js","components/useClasses/statistics/StatisticsEntries.js","components/useClasses/statistics/Statistics.js","components/useClasses/feedbackOptions/FeedbackOptions.js","components/App.js","index.js"],"names":["Section","title","children","Notifications","massage","StatisticsEntries","good","neutral","bad","total","positivePercentage","status","Statistics","props","Notification","FeedbackOptions","options","onLeaveFeedback","checkBtn","ev","target","name","Object","keys","map","el","onClick","key","state","App","sendFeedback","setState","prev","countTotalFeedback","values","reduce","acc","countPositiveFeedbackPercentage","Math","floor","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+PAWeA,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OACE,oCACE,4BAAKD,GACJC,ICAQC,EAJO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACtB,2BAAIA,ICQWC,EATW,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAKC,EAAP,EAAOA,QAAQC,EAAf,EAAeA,IAAIC,EAAnB,EAAmBA,MAAMC,EAAzB,EAAyBA,mBAAzB,OACxB,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,KCJvBC,GAAS,EAkBEC,EAZI,SAAC,GAAgB,IAAZC,EAAW,oBAEjC,OACE,oCACE,0CACCF,EAAS,kBAAC,EAAsBE,GACjC,kBAACC,EAAD,CAAcV,QAAQ,wBCMbW,EAlBS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAE3BC,EAAW,SAACC,GDAXR,GCCI,EACTM,EAAgBE,EAAGC,OAAOC,OAG5B,OACE,oCAEIC,OAAOC,KAAKP,GAASQ,KAAI,SAAAC,GAAE,OAC3B,4BAAQC,QAASR,EAAUS,IAAKF,EAAIJ,KAAMI,GAAKA,QCTjDG,EAAQ,CACZtB,KAAM,EACNC,QAAS,EACTC,IAAK,GAmCQqB,E,4MA9BbD,M,eAAYA,G,EAEZE,aAAe,SAACT,GACd,EAAKU,UAAS,SAAAC,GACZ,sBAAQX,EAAOW,EAAKX,GAAM,O,EAI9BY,mBAAqB,WACnB,OAAOX,OAAOY,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKX,GAAN,OAAaW,EAAIX,IAAI,I,EAG/DY,gCAAkC,WAChC,IAAM5B,EAAQ,EAAKwB,qBACb3B,EAAO,EAAKsB,MAAMtB,KACxB,OAAQgC,KAAKC,MAAY,IAALjC,EAAUG,GAAS,K,uDAIvC,OACE,oCACE,kBAAC,EAAD,CAASR,MAAM,yBACb,kBAAC,EAAD,CAAiBe,QAASY,EAAOX,gBAAiBuB,KAAKV,eACvD,kBAAC,EAAD,CAAYxB,KAAMkC,KAAKZ,MAAMtB,KAAMC,QAASiC,KAAKZ,MAAMrB,QAASC,IAAKgC,KAAKZ,MAAMpB,IAAKC,MAAO+B,KAAKP,qBAAsBvB,mBAAoB8B,KAAKH,0C,GAxBxII,IAAMC,WCRxBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.c6ce0b08.chunk.js","sourcesContent":["import React from 'react';\n\nconst Section = ({title, children}) => {\n  return (\n    <>\n      <h1>{title}</h1>\n      {children}\n    </>\n    );\n}\n\nexport default Section;","import React from 'react';\n\nconst Notifications = ({massage}) => (\n<p>{massage}</p>\n)\n\nexport default Notifications;","import React from 'react';\n\nconst StatisticsEntries = ({good,neutral,bad,total,positivePercentage}) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}</p>\n  </>\n)\nexport default StatisticsEntries;","import React from 'react';\nimport Notification from '../notifications/Notification'\nimport StatisticsEntries from './StatisticsEntries'\n\nlet status = false\nexport const getStart = (flag) => {\n  return status = flag; \n}\n\n\nconst Statistics = ({...props}) => {\n\n  return(\n    <>\n      <h2>Statistics</h2>\n      {status ? <StatisticsEntries {...props}/>: \n      <Notification massage=\"No feedback given\"/>\n      }\n    </>\n  )\n}\n\nexport default Statistics;","import React from 'react';\nimport {getStart} from '../statistics/Statistics';\n\n\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\n\n  const checkBtn = (ev) => {\n    getStart(true);\n    onLeaveFeedback(ev.target.name);\n  }\n\n  return(\n    <>\n      {\n        Object.keys(options).map(el => (\n        <button onClick={checkBtn} key={el} name={el}>{el}</button>\n        ))\n      }\n    </>\n  )\n}\n\nexport default FeedbackOptions;","import React from 'react';\nimport Section from './useClasses/section/Section'\nimport FeedbackOptions from './useClasses/feedbackOptions/FeedbackOptions'\nimport Statistics from './useClasses/statistics/Statistics';\n\n\nconst state = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n}\n\n\nclass App extends React.Component{\n  state = {...state};\n\n  sendFeedback = (name) => {\n    this.setState(prev => {\n      return{[name]: prev[name]+1}\n      })\n  }\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, el) => acc+el ,0);\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const good = this.state.good;\n    return (Math.floor((good*100)/total) + '%')\n  }\n\n  render(){\n    return (\n      <>\n        <Section title='Please leave feedback'>\n          <FeedbackOptions options={state} onLeaveFeedback={this.sendFeedback}/>\n          <Statistics good={this.state.good} neutral={this.state.neutral} bad={this.state.bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()}/>\n        </Section>\n      </>\n    );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}